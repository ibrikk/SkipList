import java.util.Random;

public class SkipList {
	public static void main(String[] args) {
		System.out.println("Hello World!");
	}

	private Node head;
	private Node tail;

	private final int NEG_INFINITY = Integer.MIN_VALUE;
	private final int POS_INFINITY = Integer.MAX_VALUE;

	private int heightOfSkipList = 0;

	public Random random = new Random();

	public SkipList() {
		head = new Node(NEG_INFINITY);
		tail = new Node(POS_INFINITY);
		head.next = tail;
		tail.prev = head;
	}

	public Node skipSearch(int key) {
		Node n = head;

		while (n.below != null) {
			n = n.below;

			while (key >= n.next.key) {
				n = n.next;
			}
		}
		return n;
	}

	public Node skipInsert(int key) {
		Node position = skipSearch(key);
		Node q;

		int level = -1;
		int numberOfHeads = -1;

		if (position.key == key) {
			return position;
		}

		do {
			numberOfHeads++;
			level++;
			canIncreaseLevel(level);

		} while (random.nextBoolean() == true);
	}

	private void canIncreaseLevel(int level) {
		if (level >= heightOfSkipList) {
			heightOfSkipList++;
			addEmptyLevel();
		}
	}

	private void addEmptyLevel() {
		Node newHeadNode = new Node(NEG_INFINITY);
		Node newTailNode = new Node(POS_INFINITY);

		newHeadNode.next = newTailNode;
		newHeadNode.below = head;
		newTailNode.prev = newHeadNode;
		newTailNode.below = tail;

		head.above = newHeadNode;
		tail.above = newTailNode;

		head = newHeadNode;
		tail = newTailNode;
	}

}
